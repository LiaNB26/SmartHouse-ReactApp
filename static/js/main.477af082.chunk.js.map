{"version":3,"sources":["RoomCard/RoomCard.js","HomePage/HomePage.js","AddRoom/AddRoom.js","Room/Room.js","App.js","serviceWorker.js","index.js"],"names":["RoomCard","props","roomColor","room","color","className","type","style","borderColor","title","name","HomePage","useState","listOfRooms","handleDeleteRoom","e","roomId","target","id","deleteRoomFromList","to","onClick","deleteAllRooms","map","updateCurrentRoom","key","AddRoom","roomType","setRoomType","roomName","setRoomName","setRoomColor","onChange","value","hidden","placeholder","alert","newRoomOjb","uuid","items","console","log","addRoom","Room","itemFlag","setItemFlag","itemSelected","setItemSelected","listOfRoomItems","roomItemsList","ChangeItemStatus","itemIndex","updateRoomItemStatus","handleDeleteItem","deleteItem","backgroundColor","fontSize","paddingRight","element","index","status","item","length","itemObj","addItemToRoom","deleteAllRoomItems","App","listOfItems","itemsList","setListOfRooms","currentRoom","setCurrentRoom","setListOfRoomItems","newRoomObj","currentRoomId","current","filter","newItemObj","currentStatus","updatedList","updatedCurrentItems","splice","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.477af082.chunk.js","sourcesContent":["import React from 'react';\r\nimport './RoomCard.css';\r\n\r\nexport default function RoomCard(props) {\r\n    let roomColor = props.room.color;\r\n\r\n    return (\r\n        <div className={`single-card ${props.room.type}`} style={{ borderColor: roomColor, color: roomColor }} >\r\n            <abbr title=\"click to enter room...\">\r\n                <div className='header-card-container'>\r\n                    <h2 className='card-room-font'>{props.room.name}</h2>\r\n                    <h3 className='card-room-font'>{props.room.type}</h3>\r\n                </div>\r\n            </abbr>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport RoomCard from '../RoomCard/RoomCard';\r\nimport './HomePage.css'\r\n\r\n\r\nexport default function HomePage(props) {\r\n\r\n    const [listOfRooms, setListOfRooms] = useState(props.listOfRooms);\r\n\r\n    const handleRoomEnter = (roomId) => {\r\n        props.updateCurrentRoom(roomId);\r\n    }\r\n\r\n    const handleDeleteRoom = (e) => {\r\n        let roomId = e.target.id;\r\n        props.deleteRoomFromList(roomId);\r\n    }\r\n\r\n    const handleDeleteAll = () => {\r\n        props.deleteAllRooms();\r\n    }\r\n\r\n    return (\r\n        <div className='home-page'>\r\n            <Link to=\"/addRoom\">\r\n                <button className='add-room-myButton'>Add Room</button>\r\n            </Link>\r\n            <button onClick={handleDeleteAll} className='add-room-myButton delete-all'>Delete All Rooms</button>\r\n\r\n            <div className='room-list'>\r\n                {\r\n                    listOfRooms.map((room) => (\r\n\r\n                        <div className='room-cards-container'>\r\n                            <button className='delete-button' id={room.id} onClick={handleDeleteRoom} style={{ color: room.color }}>X</button>\r\n                            <Link to=\"/room\" className='linkClass' onClick={() => { handleRoomEnter(room.id) }} >\r\n                                <RoomCard key={room.id} room={room} />\r\n                            </Link>\r\n                        </div>\r\n\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport './AddRoom.css';\r\nimport uuid from 'uuid/v4';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function AddRoom(props) {\r\n\r\n    const [roomType, setRoomType] = useState('');\r\n    const [roomName, setRoomName] = useState('');\r\n    const [roomColor, setRoomColor] = useState('#000000');\r\n\r\n    const addNewRoom = () => {\r\n\r\n        if (roomType == '') {\r\n            alert('Please select a room type!');\r\n        }\r\n        else if (roomName == '') {\r\n            alert('Please enter a room name!');\r\n        }\r\n        else {\r\n            let newRoomOjb = {\r\n                id: uuid(),\r\n                name: roomName,\r\n                type: roomType,\r\n                color: roomColor,\r\n                items: []\r\n            };\r\n\r\n            console.log(roomColor);\r\n            \r\n\r\n            props.addRoom(newRoomOjb);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='add-room'>\r\n            <div className='room-option'>\r\n                <h4 className='option-title'>Select Room Type:</h4>\r\n                <select className='room-type-select' onChange={(e) => { setRoomType(e.target.value) }} >\r\n                    <option hidden>...</option>\r\n                    <option value=\"bedroom\">Bedroom</option>\r\n                    <option value=\"kitchen\">Kitchen</option>\r\n                    <option value=\"bathroom\">Bathroom</option>\r\n                    <option value=\"living room\">Living Room</option>\r\n                </select>\r\n            </div>\r\n            <div className='room-option'>\r\n                <h4 className='option-title'>Enter Room Name:</h4>\r\n                <input className='input-box' type='text' placeholder='room name' onChange={(e) => { setRoomName(e.target.value) }} />\r\n            </div>\r\n            <div className='room-option'>\r\n                <h4 className='option-title'>Select Room Color:</h4>\r\n                <input className='color-box' type='color' onChange={(e) => { setRoomColor(e.target.value) }} />\r\n            </div>\r\n\r\n            <div className='room-option'>\r\n                <Link to=\"/\">\r\n                    <button className='add-new-room-button' onClick={addNewRoom} >Add Room</button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport './Room.css';\r\n\r\nexport default function Room(props) {\r\n\r\n    let maxItems = 12;\r\n\r\n    const [room, setRoom] = useState(props.room);\r\n    const [itemFlag, setItemFlag] = useState(false);\r\n    const [itemSelected, setItemSelected] = useState('');\r\n    const [roomId, setRoomId] = useState(props.room.id);\r\n    const [roomItemsList, setRoomItemsList] = useState(props.listOfRoomItems);\r\n\r\n    const handleShowItems = () => {\r\n        if(room.items.length < maxItems) {\r\n            setItemFlag(!itemFlag);\r\n        }\r\n        else {\r\n            alert('Sorry, Cannot add any more items to this room');\r\n        }\r\n    }\r\n\r\n    const handleItemSelected = () => {\r\n\r\n        if(itemSelected !== '' && room.items.length < maxItems) {\r\n            let itemObj = { item: itemSelected, status: 'button-off' };\r\n            setItemSelected('');\r\n            props.addItemToRoom(itemObj, roomId);\r\n        }\r\n        \r\n        setItemFlag(!itemFlag);\r\n    }\r\n\r\n    const ChangeItemStatus = (e) => {\r\n        let itemIndex = e.target.id;\r\n        props.updateRoomItemStatus(itemIndex, room.id);\r\n    }\r\n\r\n    const handleDeleteItem = (e) => {\r\n        let itemIndex = e.target.id;        \r\n        props.deleteItem(itemIndex, room.id);\r\n    }\r\n\r\n    const handleDeleteAll = () => {\r\n        props.deleteAllRoomItems(room.id);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className='current-room' style={{ backgroundColor: `${room.color}50` }}>\r\n            <div className='room-header'>\r\n                <h2><span style={{ fontSize: 18, paddingRight: 5 }} >Name: </span>{room.name}</h2>\r\n                <h3><span style={{ fontSize: 16, paddingRight: 5 }} >Type: </span>{room.type}</h3>\r\n                <br /><h5>~ click on each item to turn on/off ~</h5>\r\n            </div>\r\n\r\n            <div className='room-item-buttons'>\r\n            {\r\n                room.items.map((element, index) => (\r\n                    <div className='items-container'>\r\n                        <button id={index} onClick={handleDeleteItem} className='delete-item'>X</button>\r\n                        <button\r\n                            key={index}\r\n                            id={index}\r\n                            onClick={ChangeItemStatus}\r\n                            className={`item-button ${element.status}`} \r\n                            style={{ backgroundColor: `${room.color}` }} >{element.item}</button>\r\n                    </div>\r\n                ))\r\n            }\r\n            </div>\r\n\r\n            <div className='add-item-container'>\r\n            {\r\n                !itemFlag ?\r\n                    <div>\r\n                        <button className='add-item-button' onClick={handleShowItems}>Add Items To Room...</button><br /><br />\r\n                        <button className='delete-all-items' onClick={handleDeleteAll}>Delete All Room Items</button>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <button className='add-item-button' onClick={handleItemSelected}>Add Item</button><br />\r\n                        <select className='items-select' onChange={(e) => { setItemSelected(e.target.value) }} >\r\n                            <option hidden>...</option>\r\n                            {\r\n                                roomItemsList.map(item => (\r\n                                    <option value={`${item}`} >{item}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport HomePage from './HomePage/HomePage';\nimport AddRoom from './AddRoom/AddRoom';\nimport Room from './Room/Room';\n\n\nfunction App() {\n\n  let listOfItems = [\n    { type: 'bedroom', itemsList: ['desk lamp', 'television', 'fireplace', 'computer', 'stereo system', 'air conditioner'] },\n    { type: 'kitchen', itemsList: ['microwave', 'oven', 'kettle', 'wall lamp', 'television', 'air conditioner'] },\n    { type: 'bathroom', itemsList: ['water heater', 'wall lamp', 'washing machine', 'drying machine', 'air conditioner'] },\n  ];\n\n  const [listOfRooms, setListOfRooms] = useState([]);\n  const [currentRoom, setCurrentRoom] = useState({});\n  const [listOfRoomItems, setListOfRoomItems] = useState({});\n\n  const addRoom = (newRoomObj) => {\n    setListOfRooms([...listOfRooms, newRoomObj]);\n  }\n\n  const updateCurrentRoom = (currentRoomId) => {\n    let current = listOfRooms.filter(room => room.id === currentRoomId)[0];\n    let itemsList = [];\n\n    // check room type and set listOfRoomItems\n    if (current.type === 'bathroom') {\n      itemsList = listOfItems[2].itemsList;\n    }\n    else if (current.type === 'kitchen') {\n      itemsList = listOfItems[1].itemsList;\n    }\n    else {\n      itemsList = listOfItems[0].itemsList;\n    }\n\n    setListOfRoomItems(itemsList);\n    setCurrentRoom(current);\n  }\n\n  const addItemToRoom = (newItemObj, roomId) => {\n    currentRoom.items = [...currentRoom.items, newItemObj];    \n  }\n\n  const updateRoomItemStatus = (itemIndex, roomId) => {\n    let currentStatus = currentRoom.items[itemIndex].status;\n    if (currentStatus === 'button-off') {\n      currentStatus = 'button-on';\n    }\n    else {\n      currentStatus = 'button-off';\n    }\n\n    let items = currentRoom.items;\n    items[itemIndex].status = currentStatus;\n    currentRoom.items = items;\n\n    let updatedList = listOfRooms.map(room =>\n      room.id === roomId ? currentRoom : room\n    );\n\n    setListOfRooms(updatedList);\n\n  }\n\n  const deleteRoomFromList = (roomId) => {\n    let updatedList = listOfRooms.filter(room => room.id !== roomId);\n    setListOfRooms(updatedList);\n  }\n\n  const deleteAllRooms = () => {\n    setListOfRooms([]);\n  }\n\n  const deleteItem = (itemIndex, roomId) => {\n\n    let updatedCurrentItems = currentRoom.items.splice(itemIndex, 1);\n    console.log(updatedCurrentItems);\n\n    let updatedList = listOfRooms.map(room =>\n      room.id === roomId ? currentRoom : room\n    );\n\n    setListOfRooms(updatedList);\n    console.log('item deleted');\n\n  }\n\n  const deleteAllRoomItems = (roomId) => {\n    let items = currentRoom.items;\n    currentRoom.items = [];\n\n    let updatedList = listOfRooms.map(room =>\n      room.id === roomId ? currentRoom : room\n    );\n\n    setListOfRooms(updatedList);\n  }\n\n  return (\n    <div className=\"App\">\n\n      <Router>\n        <Link to=\"/\">\n          <button className='homeButton'>Home</button>\n        </Link>\n        <div className='header'>\n          <h1 className='app-title'>Smart House React App</h1>\n        </div>\n\n        <Switch>\n\n          <Route exact path='/' component={() => {\n            return <HomePage\n              listOfRooms={listOfRooms}\n              updateCurrentRoom={updateCurrentRoom}\n              deleteRoomFromList={deleteRoomFromList}\n              deleteAllRooms={deleteAllRooms} />\n          }} />\n\n          <Route exact path='/addRoom' component={() => {\n            return <AddRoom\n              addRoom={addRoom} />\n          }} />\n\n          <Route exact path='/room' component={() => {\n            return <Room\n              room={currentRoom}\n              addItemToRoom={addItemToRoom}\n              updateRoomItemStatus={updateRoomItemStatus}\n              deleteItem={deleteItem}\n              deleteAllRoomItems={deleteAllRoomItems}\n              listOfRoomItems={listOfRoomItems} />\n          }} />\n\n        </Switch>\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}